A.
Let x be INT_MIN and y be any number other than INT_MIN such as 1, the result will be 0.

B.
since 17*y = y<<4 + y and 15*x = x<<4 - x even if over flow happens
17*y + 15*x = y<<4 + y + x<<4 - x
       	    = (y + x)<<4 + y - x
this expression will always yield 1

C.
since -x = ~x + 1
~x + ~y + 1 = -x - 1 - y - 1 + 1 = -x - y - 1
~(x + y) = -(x + y) - 1 = -x - y - 1
there expression will always yield 1

D.
the original equation equals
(uy - ux) = (unsigned)(y - x)
and since the bit level subtraction is same for signed and unsigned, and we interpret both side as unsigned in the end, the expression will always be 1

E.
((x >> 2) << 2) have the same effect as replacing the least significate 2 bit with 0, thus ((x >> 2) << 2) must be less than or equal to x

F.
since ux is unsigned, (ux >> 1) will perform a logical right shift with set the highest bit to 0, and plus (ux & (-1 << 31)) will take the highest bit of ux and put it back. This will have exact same result as arithmetic right shift of x >> 1 which decide whether add 1 or 0 by the highest bit.

G.
when x is -1 will yield 0, because the difference of rounding down and rounding to 0.
